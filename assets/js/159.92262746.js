(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{563:function(s,a,n){"use strict";n.r(a);var t=n(2),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-静态文件服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-静态文件服务"}},[s._v("#")]),s._v(" Nginx 静态文件服务")]),s._v(" "),a("p",[s._v("我们先来看看最简单的本地静态文件服务配置示例：")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            listen       80;\n            server_name www.test.com;\n            charset utf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("8;\n            root   /data/www.test.com;\n            index  index.html index.htm;\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("就这些？恩，就这些！如果只是提供简单的对外静态文件，它真的就可以用了。可是他不完美，远远没有发挥 Nginx 的半成功力，为什么这么说呢，看看下面的配置吧，为了大家看着方便，我们把每一项的作用都做了注释。")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("      http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。")]),s._v("\n      open_file_cache max=204800 inactive=20s;\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件在inactive 时间内一次没被使用，它将被移除。")]),s._v("\n      open_file_cache_min_uses 1;\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个是指多长时间检查一次缓存的有效信息")]),s._v("\n      open_file_cache_valid 30s;\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认情况下，Nginx的gzip压缩是关闭的， gzip压缩功能就是可以让你节省不")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 少带宽，但是会增加服务器CPU的开销哦，Nginx默认只对text/html进行压缩 ，")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果要对html之外的内容进行压缩传输，我们需要手动来设置。")]),s._v("\n      gzip on;\n      gzip_min_length 1k;\n      gzip_buffers 4 16k;\n      gzip_http_version 1.0;\n      gzip_comp_level 2;\n      gzip_types text/plain application/x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("javascript text/css application/xml;\n\n      server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              listen       80;\n              server_name www.test.com;\n              charset utf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("8;\n              root   /data/www.test.com;\n              index  index.html index.htm;\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[s._v("我们都知道，应用程序和网站一样，其性能关乎生存。但如何使你的应用程序或者网站性能更好，并没有一个明确的答案。代码质量和架构是其中的一个原因，但是在很多例子中我们看到，你可以通过关注一些十分基础的应用内容分发技术（"),a("code",[s._v("basic application delivery techniques）")]),s._v("，来提高终端用户的体验。其中一个例子就是实现和调整应用栈"),a("code",[s._v("（application stack）")]),s._v("的缓存。")]),s._v(" "),a("h2",{attrs:{id:"文件缓存漫谈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件缓存漫谈"}},[s._v("#")]),s._v(" 文件缓存漫谈")]),s._v(" "),a("p",[s._v("一个 web 缓存坐落于客户端和原始服务器（origin server）中间，它保留了所有可见内容的拷贝。如果一个客户端请求的内容在缓存中存储，则可以直接在缓存中获得该内容而不需要与服务器通信。这样一来，由于web缓存距离客户端“更近”，就可以提高响应性能，并更有效率的使用应用服务器，因为服务器不用每次请求都进行页面生成工作。")]),s._v(" "),a("p",[s._v("在浏览器和应用服务器之间，存在多种潜在缓存，如：客户端浏览器缓存、中间缓存、内容分发网络（CDN）和服务器上的负载平衡和反向代理。缓存，仅在反向代理和负载均衡的层面，就对性能提高有很大的帮助。")]),s._v(" "),a("p",[s._v("举个例子说明，去年，我接手了一项任务，这项任务的内容是对一个加载缓慢的网站进行性能优化。首先引起我注意的事情是，这个网站差不多花费了超过1秒钟才生成了主页。经过一系列调试，我发现加载缓慢的原因在于页面被标记为不可缓存，即为了响应每一个请求，页面都是动态生成的。由于页面本身并不需要经常性的变更，并且不涉及个性化，那么这样做其实并没有必要。为了验证一下我的结论，我将页面标记为每5秒缓存一次，仅仅做了这一个调整，就能明显的感受到性能的提升。第一个字节到达的时间降低到几毫秒，同时页面的加载明显要更快。")]),s._v(" "),a("p",[s._v("并不是只有大规模的内容分发网络（CDN）可以在使用缓存中受益——缓存还可以提高负载平衡器、反向代理和应用服务器前端web服务的性能。通过上面的例子，我们看到，缓存内容结果，可以更高效的使用应用服务器，因为不需要每次都去做重复的页面生成工作。此外，Web缓存还可以用来提高网站可靠性。当服务器宕机或者繁忙时，比起返回错误信息给用户，不如通过配置Nginx将已经缓存下来的内容发送给用户。这意味着，网站在应用服务器或者数据库故障的情况下，可以保持部分甚至全部的功能运转。")]),s._v(" "),a("p",[s._v("下面讨论如何安装和配置 Nginx 的基础缓存（Basic Caching）。")]),s._v(" "),a("h2",{attrs:{id:"如何安装和配置基础缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何安装和配置基础缓存"}},[s._v("#")]),s._v(" 如何安装和配置基础缓存")]),s._v(" "),a("p",[s._v("我们只需要两个命令就可以启用基础缓存： proxy_cache_path 和 proxy_cache 。proxy_cache_path 用来设置缓存的路径和配置，proxy_cache 用来启用缓存。")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("      proxy_cache_path/path/to/cache levels=1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("2 keys_zone=my_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10m max_size=10g inactive=60m\n      use_temp_path=off;\n\n      server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n          location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              proxy_cache my_cache;\n              proxy_pass http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//my_upstream;\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("code",[s._v("proxy_cache_path")]),s._v(" 命令中的参数及对应配置说明如下：")]),s._v(" "),a("p",[s._v("用于缓存的本地磁盘目录是 /path/to/cache/")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("levels")]),s._v(" 在 /path/to/cache/ 设置了一个两级层次结构的目录。将大量的文件放置在单个目录中会导致文件访问缓慢，所以针对大多数部署，我们推荐使用两级目录层次结构。如果 levels 参数没有配置，则 Nginx 会将所有的文件放到同一个目录中。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("keys_zone")]),s._v(" 设置一个共享内存区，该内存区用于存储缓存键和元数据，有些类似计时器的用途。将键的拷贝放入内存可以使 Nginx 在不检索磁盘的情况下快速决定一个请求是HIT还是MISS，这样大大提高了检索速度。一个 1MB 的内存空间可以存储大约 8000个key，那么上面配置的 10MB 内存空间可以存储差不多 80000 个 key。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("max_size")]),s._v(" 设置了缓存的上限（在上面的例子中是 10G）。这是一个可选项；如果不指定具体值，那就是允许缓存不断增长，占用所有可用的磁盘空间。当缓存达到这个上线，处理器便调用 cache manager 来移除最近最少被使用的文件，这样把缓存的空间降低至这个限制之下。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("inactive")]),s._v("指定了项目在不被访问的情况下能够在内存中保持的时间。在上面的例子中，如果一个文件在 60 分钟之内没有被请求，则缓存管理将会自动将其在内存中删除，不管该文件是否过期。该参数默认值为 10 分钟（10m）。注意，非活动内容有别于过期内容。 Nginx 不会自动删除由缓存控制头部指定的过期内容（本例中 Cache-Control:max-age=120）。过期内容只有在 inactive 指定时间内没有被访问的情况下才会被删除。如果过期内容被访问了，那么 Nginx 就会将其从原服务器上刷新，并更新对应的inactive计时器。")])])]),s._v(" "),a("p",[s._v("Nginx 最初会将注定写入缓存的文件先放入一个临时存储区域，"),a("code",[s._v("use_temp_path=off")]),s._v("命令指示 Nginx 将在缓存这些文件时将它们写入同一个目录下。我们强烈建议你将参数设置为off来避免在文件系统中不必要的数据拷贝。use_temp_path在 Nginx 1.7版本和 Nginx Plus R6中有所介绍。\n最终，"),a("code",[s._v("proxy_cache")]),s._v("命令启动缓存那些URL与location部分匹配的内容（本例中，为/）。你同样可以将proxy_cache命令添加到server部分，这将会将缓存应用到所有的那些location中未指定自己的proxy_cache命令的服务中。")]),s._v(" "),a("h2",{attrs:{id:"陈旧总比没有强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#陈旧总比没有强"}},[s._v("#")]),s._v(" 陈旧总比没有强")]),s._v(" "),a("p",[s._v("Nginx 内容缓存的一个非常强大的特性是：当无法从原始服务器获取最新的内容时， Nginx 可以分发缓存中的陈旧（stale，编者注：即过期内容）内容。这种情况一般发生在关联缓存内容的原始服务器宕机或者繁忙时。比起对客户端传达错误信息， Nginx 可发送在其内存中的陈旧的文件。 Nginx 的这种代理方式，为服务器提供额外级别的容错能力，并确保了在服务器故障或流量峰值的情况下的正常运行。为了开启该功能，只需要添加 proxy_cache_use_stale 命令即可：")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("      location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n          proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("按照上面例子中的配置，当 Nginx 收到服务器返回的error，timeout或者其他指定的5xx错误，并且在其缓存中有请求文件的陈旧版本，则会将这些陈旧版本的文件而不是错误信息发送给客户端。")]),s._v(" "),a("h2",{attrs:{id:"缓存微调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存微调"}},[s._v("#")]),s._v(" 缓存微调")]),s._v(" "),a("p",[s._v("Nginx 提供了丰富的可选项配置用于缓存性能的微调。下面是使用了几个配置的例子：")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("    proxy_cache_path /path/to/cache levels=1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("2 keys_zone=my_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10m max_size=10g inactive=60m\n    use_temp_path=off;\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            proxy_cache my_cache;\n            proxy_cache_revalidate on;\n            proxy_cache_min_uses 3;\n            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n            proxy_cache_lock on;\n            proxy_pass http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//my_upstream;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这些命令配置了下列的行为：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("proxy_cache_revalidate")]),s._v(" 指示 Nginx 在刷新来自服务器的内容时使用 GET 请求。如果客户端的请求项已经被缓存过了，但是在缓存控制头部中定义为过期，那么 Nginx 就会在 GET 请求中包含 If-Modified-Since 字段，发送至服务器端。这项配置可以节约带宽，因为对于 Nginx 已经缓存过的文件，服务器只会在该文件请求头中 Last-Modified 记录的时间内被修改时才将全部文件一起发送。")]),s._v(" "),a("li",[a("code",[s._v("proxy_cache_min_uses")]),s._v(" 该指令设置同一链接请求达到几次即被缓存，默认值为 1 。当缓存不断被填满时，这项设置便十分有用，因为这确保了只有那些被经常访问的内容会被缓存。")]),s._v(" "),a("li",[a("code",[s._v("proxy_cache_use_stale")]),s._v(" 中的 updating 参数告知 Nginx 在客户端请求的项目的更新正在原服务器中下载时发送旧内容，而不是向服务器转发重复的请求。第一个请求陈旧文件的用户不得不等待文件在原服务器中更新完毕。陈旧的文件会返回给随后的请求直到更新后的文件被全部下载。\n当 "),a("code",[s._v("proxy_cache_lock")]),s._v("被启用时，当多个客户端请求一个缓存中不存在的文件（或称之为一个 MISS），只有这些请求中的第一个被允许发送至服务器。其他请求在第一个请求得到满意结果之后在缓存中得到文件。如果不启用 proxy_cache_lock，则所有在缓存中找不到文件的请求都会直接与服务器通信。")])]),s._v(" "),a("h2",{attrs:{id:"跨多硬盘分割缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨多硬盘分割缓存"}},[s._v("#")]),s._v(" 跨多硬盘分割缓存")]),s._v(" "),a("p",[s._v("使用 Nginx 不需要建立一个RAID（磁盘阵列）。如果有多个硬盘， Nginx 可以用来在多个硬盘之间分割缓存。下面是一个基于请求 URI 跨越两个硬盘之间均分缓存的例子：")]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[s._v("      proxy_cache_path /path/to/hdd1 levels=1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("2 keys_zone=my_cache_hdd1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10m max_size=10g\n\n      inactive=60m use_temp_path=off;\n      proxy_cache_path /path/to/hdd2 levels=1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("2 keys_zone=my_cache_hdd2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10m max_size=10g inactive=60m use_temp_path=off;\n      split_clients $request_uri $my_cache "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v('\n          50% "my_cache_hdd1";\n          50% "my_cache_hdd2";\n      '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n          location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              proxy_cache $my_cache;\n              proxy_pass http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//my_upstream;\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);